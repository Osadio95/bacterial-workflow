// nextflow.config

/*------------------------------------------------------------------
 * Pipeline Metadata
 *-----------------------------------------------------------------*/
manifest {
    name = 'Genomic Analysis Pipeline'
    author = 'Ousmane SADIO'
    homePage = 'https://github.com/osadio95/bacterial-workflow'
    description = 'Nextflow pipeline for Illumina genomic data analysis'
    mainScript = 'main.nf'
    nextflowVersion = '>=21.10.0'
    version = '1.0.0'
}

/*------------------------------------------------------------------
 * Global Default Parameters
 *-----------------------------------------------------------------*/
params {
    // Resource limits
    max_memory = 128.GB
    max_cpus = 18
    max_time = 72.h
    
    // Tool activation flags
    bakta = false
    help = false
    checkm2 = false
    mash = false
    kraken2 = false
    
    // Usage
    reads = "$projectDir/data/*_R{1,2}.fastq.gz"
    outdir = "$projectDir/results"
    threads = Runtime.runtime.availableProcessors()
    
    // Databases
    abricate_db = "resfinder"
    kraken_db = "$projectDir/db/minikraken2_v1_8GB"
    checkm2_db = "$projectDir/db/checkm2_database/CheckM2_db/uniref100.KO.1.dmnd"
    mash_db = "$projectDir/db/refseq.msh"
    bakta_db = "$projectDir/db/db_bakta"
   
}

/*------------------------------------------------------------------
 * Process Configuration
 *-----------------------------------------------------------------*/
process {
    errorStrategy = 'retry'
    maxRetries = 3
    
    withLabel: 'process_low' {
        cpus = { check_max(2 * task.attempt, 'cpus') }
        memory = { check_max(4.GB * task.attempt, 'memory') }
        time = { check_max(4.h * task.attempt, 'time') }
    }
    
    withLabel: 'process_medium' {
        cpus = { check_max(6 * task.attempt, 'cpus') }
        memory = { check_max(16.GB * task.attempt, 'memory') }
        time = { check_max(8.h * task.attempt, 'time') }
    }
    
    withLabel: 'process_high' {
        cpus = { check_max(12 * task.attempt, 'cpus') }
        memory = { check_max(32.GB * task.attempt, 'memory') }  // Increased from 16GB
        time = { check_max(16.h * task.attempt, 'time') }
    }
}

/*------------------------------------------------------------------
 * Resource Validation Function
 *-----------------------------------------------------------------*/
def check_max(obj, type) {
    try {
        switch(type) {
            case 'memory':
                def maxMem = params.max_memory as nextflow.util.MemoryUnit
                return obj.compareTo(maxMem) > 0 ? maxMem : obj
                
            case 'time':
                def maxTime = params.max_time as nextflow.util.Duration
                return obj.compareTo(maxTime) > 0 ? maxTime : obj
                
            case 'cpus':
                return Math.min(obj, params.max_cpus as int)
                
            default:
                return obj
        }
    } catch (Exception e) {
        System.err.println "Warning: Failed to check max $type: ${e.message}"
        return obj
    }
}

/*------------------------------------------------------------------
 * Container Configuration
 *-----------------------------------------------------------------*/
docker {
    enabled = true
    fixOwnership = true
    runOptions = '-u $(id -u):$(id -g) -v $PWD/db:/db'
}

/*------------------------------------------------------------------
 * Execution Profiles
 *-----------------------------------------------------------------*/
profiles {
    // Local execution (default)
    local {
        process.executor = 'local'
        docker.enabled = true
    }
    
    
    // Singularity profile
    singularity {
        singularity.enabled = true
        singularity.autoMounts = true
    }
}

/*------------------------------------------------------------------
 * Environment Safety Checks
 *-----------------------------------------------------------------*/
// Validate system resources before execution
if (params.max_cpus > Runtime.runtime.availableProcessors()) {
    System.err.println "Warning: max_cpus (${params.max_cpus}) exceeds available cores (${Runtime.runtime.availableProcessors()})"
}
